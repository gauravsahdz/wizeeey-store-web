// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for providing style recommendations based on a given clothing item.
 *
 * It exports:
 * - `getStyleRecommendations`: A function to trigger the style recommendation flow.
 * - `StyleRecommendationInput`: The input type for the flow, defining the clothing item to base recommendations on.
 * - `StyleRecommendationOutput`: The output type for the flow, providing a list of recommended items and a rationale.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

/**
 * Input schema for the style recommendation flow.
 */
const StyleRecommendationInputSchema = z.object({
  itemDescription: z
    .string()
    .describe('A detailed description of the clothing item for which to generate style recommendations.'),
  itemPhotoDataUri: z
    .string()
    .describe(
      "A photo of the clothing item, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});

/**
 * Type definition for the input to the style recommendation flow.
 */
export type StyleRecommendationInput = z.infer<typeof StyleRecommendationInputSchema>;

/**
 * Output schema for the style recommendation flow.
 */
const StyleRecommendationOutputSchema = z.object({
  recommendations: z.array(
    z.object({
      itemId: z.string().describe('Unique identifier for the recommended item.'),
      itemName: z.string().describe('Name of the recommended item.'),
      itemDescription: z.string().describe('Description of the recommended item.'),
      itemPhotoDataUri: z
        .string()
        .describe(
          "A photo of the recommended item, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
        ),
    })
  ).describe('A list of recommended clothing items that complement the input item.'),
  rationale: z
    .string()
    .describe('A brief explanation of why these items are recommended and how they complement the input item.'),
});

/**
 * Type definition for the output of the style recommendation flow.
 */
export type StyleRecommendationOutput = z.infer<typeof StyleRecommendationOutputSchema>;

/**
 * Asynchronously retrieves style recommendations for a given clothing item.
 *
 * @param input - The input containing the item description and photo.
 * @returns A promise that resolves to the style recommendations.
 */
export async function getStyleRecommendations(
  input: StyleRecommendationInput
): Promise<StyleRecommendationOutput> {
  return styleRecommendationFlow(input);
}

/**
 * Defines the prompt for generating style recommendations.
 */
const styleRecommendationPrompt = ai.definePrompt({
  name: 'styleRecommendationPrompt',
  input: {schema: StyleRecommendationInputSchema},
  output: {schema: StyleRecommendationOutputSchema},
  prompt: `You are a personal stylist providing fashion recommendations.

Based on the following clothing item, suggest complementary items to create a stylish outfit. Provide a rationale for your choices.

Item Description: {{{itemDescription}}}
Item Photo: {{media url=itemPhotoDataUri}}

Ensure that the recommendations are coherent and suitable for the item described. The recommendations should include a photo for each item.

Output the recommendations in JSON format.`,
});

/**
 * Defines the Genkit flow for generating style recommendations.
 */
const styleRecommendationFlow = ai.defineFlow(
  {
    name: 'styleRecommendationFlow',
    inputSchema: StyleRecommendationInputSchema,
    outputSchema: StyleRecommendationOutputSchema,
  },
  async input => {
    const {output} = await styleRecommendationPrompt(input);
    return output!;
  }
);

